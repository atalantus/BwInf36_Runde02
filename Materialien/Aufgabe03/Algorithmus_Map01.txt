/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Algorithmus:
		1. Suche nach QuaxPos
		2. Dann Suche nach StadtPos
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public SearchInformation FindPath() 
{
	SearchInformation info = new SearchInformation(QuaxPos, StadtPos);
	Start.SearchPath(info);
}
	
public SearchInformation SearchPath(SearchInformation curStatus) 
{
	WENN (RechteckTyp unbekannt) DANN GetRechteckTyp();
	
	WENN (RechteckTyp WASSER) DANN return curStatus;
	WENN (RechteckTyp PASSIERBAR) 
	DANN 
		WENN (!curStatus.QuaxGefunden) 
			// Quax ist in diesem Quadrat
			curStatus.QuaxGefunden = true;
			// Start Node des Weges
			curStatus.Weg.add(this);
		SONST 
			// Ziel ist in diesem Quadrat
			curStatus.StadtGefunden = true;
			// Letzte Node des Weges
			curStatus.Weg.add(this);
			
		return curStatus;
	WENN (RechteckTyp GEMISCHT)
	DANN
		WENN (InnereQuadrate == null) DANN InnereQuadrateAufteilen();
		Quadrat[] innereQuadrateSortiert = SortierInnereQuadrate(curStatus.QuaxGefunden); // Parameter, damit er weiss nach was er sortieren soll
		
		for (int i = 0; i < innereQuadrateSortiert.Length; i++)
		{
			Node aktuellesQuadrat = innereQuadrateSortiert[i];
			SearchInformation info = aktuellesQuadrat.SearchPath(curStatus);
			
			WENN (info.StadtGefunden) DANN return info; // Ende gefunden; Fertig
			SONST WENN (info.QuaxGefunden && !curStatus.QuaxGefunden) // Quax wurde gefunden; Starte hier Suche nach Ziel
			DANN
				return this.SearchPath(info);
			
		}
}

public struct SearchInformation
{
	QuaxPos;
	QuaxGefunden;
	StadtPos;
	StadtGefunden;
	Weg
}